import sqlite3
import zlib


class WikiDB(object):
    def __init__(self, filename: str):
        """
        This is the source wikidb to do more specific actions on
        Generated by wikiparse.py
        :param filename: Filename for your db
        """
        self.filename = filename
        self.conn = sqlite3.connect(filename)
        self.conn.execute("""
        CREATE TABLE IF NOT EXISTS articles (
          pageid integer UNIQUE,
          title text,
          categories text)""")
        self.conn.commit()
        self.cur = self.conn.cursor()
        self.pending = 0  # Counter for when to commit
        self.column_names = ('pageid', 'title', 'categories')

    def maybe_commit(self):
        """
        Called when row is inserted
        Will check if self.pending is 100
        If so commit current data
        This improves time efficiency
        """
        self.pending += 1
        if self.pending > 100:
            self.commit()

    def commit(self):
        """
        Called every 100 self.maybe_commits() and at the end of the parsing
        """
        self.conn.commit()
        self.pending = 0

    def insert(self, pageid: int, title: str, categories: str):
        """
        Compresses article and inserts values into db
        :param pageid: Unique identifier for every wiki article
        :param title: Title of wiki article
        :param categories: repr of list of categories
        :param article: Wiki article
        """

        self.conn.execute("""
          INSERT or IGNORE INTO articles VALUES (?, ?, ?);
        """, (pageid, title, categories))
        self.maybe_commit()
    
    def __repr__(self):
      return '<SQLite DB (' +  self.filename + '): ' + ', '.join(self.column_names) + '>'

class WikiDB_zlib(WikiDB):
    def __init__(self, filename: str):
        """
        This is the source wikidb to do more specific actions on
        Generated by wikiparse.py
        :param filename: Filename for your db
        """
        self.filename = filename
        self.conn = sqlite3.connect(filename)
        self.conn.execute("""
        CREATE TABLE IF NOT EXISTS articles (
          pageid integer UNIQUE,
          title text,
          categories text,
          zarticle text)""")
        self.conn.commit()
        self.cur = self.conn.cursor()
        self.pending = 0  # Counter for when to commit
        self.column_names = ('pageid', 'title', 'categories', 'zarticle')


    def insert(self, pageid: int, title: str, categories: str, article: str):
        """
        Compresses article and inserts values into db
        :param pageid: Unique identifier for every wiki article
        :param title: Title of wiki article
        :param categories: repr of list of categories
        :param article: Wiki article
        """
        zarticle = zlib.compress(article.encode('utf-8'))
        self.conn.execute("""
          INSERT or IGNORE INTO articles VALUES (?, ?, ?, ?);
        """, (pageid, title, categories, zarticle))
        self.maybe_commit()

if __name__ == '__main__':
  db = WikiDB_zlib('test_db.db')
  print(repr(db))
